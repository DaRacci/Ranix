From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DaRacci <racci@racci.dev>
Date: Fri, 18 Nov 2022 21:40:58 +1100
Subject: [PATCH] Block Drop API


diff --git a/src/main/java/dev/racci/tentacles/Tentacles.java b/src/main/java/dev/racci/tentacles/Tentacles.java
index 430769228e281165b78fd6664283236b738fd71f..f1e25ea48862ab35c8a72c87c353900ae7a9c95c 100644
--- a/src/main/java/dev/racci/tentacles/Tentacles.java
+++ b/src/main/java/dev/racci/tentacles/Tentacles.java
@@ -1,6 +1,7 @@
 package dev.racci.tentacles;
 
 import com.google.common.collect.ImmutableMap;
+import dev.racci.tentacles.utils.TriPredicate;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.function.BiFunction;
@@ -8,11 +9,13 @@ import java.util.function.BiPredicate;
 import org.bukkit.NamespacedKey;
 import org.bukkit.block.BlockState;
 import org.bukkit.entity.Player;
+import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public class Tentacles {
     private static final Map<NamespacedKey, BiFunction<Player, BlockState, Float>> customMiningMultipliers = new HashMap<>();
+    private static final Map<NamespacedKey, TriPredicate<Player, BlockState, ItemStack>> customToolConditions = new HashMap<>();
 
     /**
      * Registers a custom mining modifier.
@@ -62,7 +65,32 @@ public class Tentacles {
         return ImmutableMap.copyOf(customMiningMultipliers);
     }
 
+    /**
+     * Registers a custom block drop condition.
+     *
+     * @param namespacedKey The namespaced key of the condition.
+     * @param predicate The predicate to check if the tool is correct for the block.
+     */
+    public static void addGlobalBlockDropCondition(
+        @NotNull final NamespacedKey namespacedKey,
+        @NotNull final TriPredicate<@NotNull Player, @NotNull BlockState, @NotNull ItemStack> predicate
+    ) { customToolConditions.put(namespacedKey, predicate); }
+
+    /**
+     * Removes a custom tool condition.
+     *
+     * @param namespacedKey The namespaced key of the condition.
+     * @return If the condition was removed.
+     */
+    public static boolean removeGlobalBlockDropCondition(@NotNull final NamespacedKey namespacedKey) {
+        return customToolConditions.remove(namespacedKey) != null;
+    }
+
+    public static @NotNull Map<@NotNull NamespacedKey, @NotNull TriPredicate<@NotNull Player, @NotNull BlockState, @NotNull ItemStack>> getGlobalBlockDropCondition() {
+        return ImmutableMap.copyOf(customToolConditions);
+    }
+
     private Tentacles() {
         throw new UnsupportedOperationException("Tentacles is a static class");
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/dev/racci/tentacles/utils/TriPredicate.java b/src/main/java/dev/racci/tentacles/utils/TriPredicate.java
new file mode 100644
index 0000000000000000000000000000000000000000..57a58be5e1988ad32388038f995e4871009fd3da
--- /dev/null
+++ b/src/main/java/dev/racci/tentacles/utils/TriPredicate.java
@@ -0,0 +1,75 @@
+package dev.racci.tentacles.utils;
+
+import java.util.function.Predicate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+/**
+ * Represents a predicate (boolean-valued function) of three arguments.
+ * This is the nullable three-arity specialization of {@link Predicate}.
+ *
+ * <p>This is a <a href="package-summary.html">functional interface</a>
+ * whose functional method is {@link #test(Object, Object, Object)}.
+ *
+ * @param <T> the type of the first argument to the predicate
+ * @param <U> the type of the second argument the predicate
+ * @param <R> the type of the third argument the predicate
+ *
+ * @see Predicate
+ */
+@FunctionalInterface
+public interface TriPredicate<T, U, R> {
+
+    /**
+     * Evaluates this predicate on the given arguments.
+     *
+     * @param t the first input argument
+     * @param u the second input argument
+     * @param r the third input argument
+     * @return {@code true} if the input arguments match the predicate, otherwise {@code false}
+     */
+    @Nullable Boolean test(@Nullable T t, @Nullable U u, @Nullable R r);
+
+    /**
+     * Returns a composed predicate that represents a short-circuiting logical
+     * AND of this predicate and another.
+     *
+     * <p> When evaluating the composed predicate, if this predicate is {@code false}, then the {@code other} predicate is not evaluated.
+     *
+     * <p>Any exceptions thrown during evaluation of either predicate are relayed
+     * to the caller; if evaluation of this predicate throws an exception, the
+     * {@code other} predicate will not be evaluated.
+     *
+     * @param other a predicate that will be logically-ANDed with this predicate
+     * @return a composed predicate that represents the short-circuiting logical AND of this predicate and the {@code other} predicate.
+     */
+    default @NotNull TriPredicate<T, U, R> and(@NotNull TriPredicate<? super T, ? super U, ? super R> other) {
+        return (T t, U u, R r) -> Boolean.TRUE.equals(test(t, u, r)) && Boolean.TRUE.equals(other.test(t, u, r));
+    }
+
+    /**
+     * Returns a predicate that represents the logical negation of this predicate.
+     *
+     * @return a predicate that represents the logical negation of this predicate
+     */
+    default @NotNull TriPredicate<T, U, R> negate() {
+        return (T t, U u, R r) -> !Boolean.TRUE.equals(test(t, u, r));
+    }
+
+    /**
+     * Returns a composed predicate that represents a short-circuiting logical
+     * OR of this predicate and another.
+     *
+     * <p>When evaluating the composed predicate, if this predicate is {@code true}, then the {@code other} predicate is not evaluated.
+     *
+     * <p>Any exceptions thrown during evaluation of either predicate are relayed
+     * to the caller; if evaluation of this predicate throws an exception, the
+     * {@code other} predicate will not be evaluated.
+     *
+     * @param other a predicate that will be logically-ORed with this predicate
+     * @return a composed predicate that represents the short-circuiting logical OR of this predicate and the {@code other} predicate.
+     */
+    default @NotNull TriPredicate<T, U, R> or(@NotNull TriPredicate<? super T, ? super U, ? super R> other) {
+        return (T t, U u, R r) -> Boolean.TRUE.equals(test(t, u, r)) || Boolean.TRUE.equals(other.test(t, u, r));
+    }
+}
