From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DaRacci <racci@racci.dev>
Date: Sun, 6 Nov 2022 11:38:12 +1100
Subject: [PATCH] Mining Speed API


diff --git a/src/main/java/dev/racci/tentacles/Tentacles.java b/src/main/java/dev/racci/tentacles/Tentacles.java
new file mode 100644
index 0000000000000000000000000000000000000000..1e2bdefd48acc1b77dc4910900876724aed97081
--- /dev/null
+++ b/src/main/java/dev/racci/tentacles/Tentacles.java
@@ -0,0 +1,69 @@
+package dev.racci.tentacles;
+
+import com.google.common.collect.ImmutableMap;
+import it.unimi.dsi.fastutil.Pair;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.function.BiFunction;
+import java.util.function.BiPredicate;
+import org.bukkit.NamespacedKey;
+import org.bukkit.block.BlockState;
+import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class Tentacles {
+    private static final Map<NamespacedKey, BiFunction<Player, BlockState, Float>> customMiningMultipliers = new HashMap<>();
+
+    /**
+     * Registers a custom mining modifier.
+     *
+     * @param namespacedKey The namespaced key of the modifier.
+     * @param multiplier The multiplier to apply to the mining speed.
+     * @param predicate The predicate to check if the modifier should be applied.
+     */
+    public static void addGlobalMiningModifier(
+        @NotNull final NamespacedKey namespacedKey,
+        final float multiplier,
+        @NotNull final BiPredicate<Player, BlockState> predicate
+    ) { customMiningMultipliers.compute(namespacedKey, (key, pair) -> (player, block) -> predicate.test(player, block) ? multiplier : null); }
+
+    /**
+     * Registers a custom mining modifier.
+     *
+     * @param namespacedKey The namespaced key of the modifier.
+     * @param function The function that if returning a non-null value, will be applied to the mining speed.
+     */
+    public static void addGlobalMiningModifier(
+        @NotNull final NamespacedKey namespacedKey,
+        @NotNull final BiFunction<@NotNull Player, @NotNull BlockState, @Nullable Float> function
+    ) { customMiningMultipliers.put(namespacedKey, function); }
+
+    /**
+     * Removes a custom mining modifier.
+     *
+     * @param namespacedKey The namespaced key of the modifier.
+     * @return If the modifier was removed.
+     */
+    public static boolean removeGlobalMiningModifier(@NotNull final NamespacedKey namespacedKey) {
+        return customMiningMultipliers.remove(namespacedKey) != null;
+    }
+
+    /**
+     * Gets the mining speed multiplier for a player and block.
+     *
+     * @param namespacedKey The namespaced key of the modifier.
+     * @return The mining speed function.
+     */
+    public static @Nullable BiFunction<@NotNull Player, @NotNull BlockState, @Nullable Float> getGlobalMiningModifier(@NotNull final NamespacedKey namespacedKey) {
+        return customMiningMultipliers.get(namespacedKey);
+    }
+
+    public static @NotNull Map<@NotNull NamespacedKey, @NotNull BiFunction<@NotNull Player, @NotNull BlockState, @Nullable Float>> getGlobalMiningModifiers() {
+        return ImmutableMap.copyOf(customMiningMultipliers);
+    }
+
+    private Tentacles() {
+        throw new UnsupportedOperationException("Tentacles is a static class");
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 9c2dcca0b6e34a3083226360575f0956a077d767..7cc289ee1a033d91210dd56360928e63f2cce091 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -3007,4 +3007,19 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     void sendDeathScreen(@NotNull Component message, @Nullable Entity killer);
     // Purpur end
+
+    // Tentacles start
+
+    /**
+     * Gets if the player has always correct tool
+     * @return true if the player has always correct tool
+     */
+    boolean isAlwaysCorrectTool();
+
+    /**
+     * Sets whether the player is always using the correct tool.
+     * @param alwaysCorrectTool Whether the player is always using the correct tool.
+     */
+    void setAlwaysCorrectTool(boolean alwaysCorrectTool);
+    // Tentacles end
 }
