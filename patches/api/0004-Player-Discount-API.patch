From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DaRacci <racci@racci.dev>
Date: Fri, 20 May 2022 16:26:48 +1000
Subject: [PATCH] Player Discount API


diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
index afaa21b9347683fa373a938d9b1aa01c2058192a..806b6da4d8e9d725913c4ef616e1e89c24fbda8a 100644
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
@@ -2,8 +2,12 @@ package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.UUID;
+
 import org.bukkit.Material;
+import org.bukkit.entity.Player;
 import org.bukkit.entity.Villager;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.util.NumberConversions;
@@ -58,6 +62,7 @@ public class MerchantRecipe implements Recipe {
     private int villagerExperience;
     private float priceMultiplier;
     private boolean ignoreDiscounts; // Paper
+    private HashMap<UUID, Double> playerDiscounts; // Tentacles
 
     public MerchantRecipe(@NotNull ItemStack result, int maxUses) {
         this(result, 0, maxUses, false);
@@ -79,8 +84,12 @@ public class MerchantRecipe implements Recipe {
         this(result, uses, maxUses, experienceReward, villagerExperience, priceMultiplier, 0, 0, ignoreDiscounts);
     }
     public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts) {
+        // Tentacles start
+        this(result, uses, maxUses, experienceReward, villagerExperience, priceMultiplier, demand, specialPrice, ignoreDiscounts, null);
+    }
+    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts, @Nullable HashMap<UUID, Double> playerDiscounts) {
         this.ignoreDiscounts = ignoreDiscounts;
-        // Paper end
+        this.playerDiscounts = playerDiscounts != null ? playerDiscounts : new HashMap<>();
         this.result = result;
         this.uses = uses;
         this.maxUses = maxUses;
@@ -90,6 +99,7 @@ public class MerchantRecipe implements Recipe {
         this.demand = demand;
         this.specialPrice = specialPrice;
     }
+    // Tentacles end
 
     @NotNull
     @Override
@@ -309,4 +319,64 @@ public class MerchantRecipe implements Recipe {
         this.ignoreDiscounts = ignoreDiscounts;
     }
     // Paper end
+
+    // Tentacles start
+    /**
+     *
+     * @param uuid The UUID of the player
+     * @return The discount for this player or global discount if the player has no specific discount.
+     */
+    public double getPriceMultiplier(@NotNull UUID uuid) {
+        return this.playerDiscounts.containsKey(uuid) ? this.playerDiscounts.get(uuid) : priceMultiplier;
+    }
+
+    /**
+     *
+     * @param player The player
+     * @return The discount for this player or global discount if the player has no specific discount.
+     */
+    public double getPriceMultiplier(@NotNull Player player) {
+        return getPriceMultiplier(player.getUniqueId());
+    }
+
+    /**
+     * Sets the price multiplier for this uuid.
+     *
+     * @param uuid The UUID of the player
+     * @param priceMultiplier The new price multiplier
+     */
+    public void setPriceMultiplier(@NotNull UUID uuid, double priceMultiplier) {
+        this.playerDiscounts.put(uuid, priceMultiplier);
+    }
+
+    /**
+     * Sets the price multiplier for this player.
+     *
+     * @param player The player
+     * @param priceMultiplier The new price multiplier
+     */
+    public void setPriceMultiplier(@NotNull Player player, double priceMultiplier) {
+        setPriceMultiplier(player.getUniqueId(), priceMultiplier);
+    }
+
+    /**
+     * Removes the price multiplier for this uuid.
+     *
+     * @param uuid The UUID of the player
+     * @return The uuids previous discount or null.
+     */
+    public @NotNull Double removePriceMultiplier(@NotNull UUID uuid) {
+        return this.playerDiscounts.remove(uuid);
+    }
+
+    /**
+     * Removes the price multiplier for this player.
+     *
+     * @param player The player
+     * @return The players previous discount or null.
+     */
+    public @NotNull Double removePriceMultiplier(@NotNull Player player) {
+        return removePriceMultiplier(player.getUniqueId());
+    }
+    // Tentacles end
 }
