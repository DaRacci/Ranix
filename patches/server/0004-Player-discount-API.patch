From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DaRacci <racci@racci.dev>
Date: Fri, 20 May 2022 16:26:27 +1000
Subject: [PATCH] Player discount API


diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index b1a4b83fc248ae2f0a8852e60f9cd4486535390a..53dbc78dd26c36c4d1cb1c0e400b7c214c21e7a1 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -608,9 +608,22 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                 if (merchantrecipe.ignoreDiscounts) continue; // Paper
 
                 merchantrecipe.addToSpecialPriceDiff(-Mth.floor((float) i * merchantrecipe.getPriceMultiplier()));
+                System.out.println("Special price diff: " + merchantrecipe.getSpecialPriceDiff());
             }
         }
 
+        // Tentacles start
+        for (int j = 0; j < this.getOffers().size(); ++j) {
+            MerchantOffer merchantrecipe = this.getOffers().get(j);
+            if (merchantrecipe.ignoreDiscounts || !merchantrecipe.playerDiscounts.containsKey(player.getUUID())) continue;
+
+            double discount = merchantrecipe.getBaseCostA().getCount() * merchantrecipe.playerDiscounts.get(player.getUUID());
+            System.out.println("Discount: " + discount);
+            merchantrecipe.addToSpecialPriceDiff(-Mth.floor(discount));
+            System.out.println("New Special price diff: " + merchantrecipe.getSpecialPriceDiff());
+        }
+        // Tentacles end
+
         if (player.hasEffect(MobEffects.HERO_OF_THE_VILLAGE)) {
             MobEffectInstance mobeffect = player.getEffect(MobEffects.HERO_OF_THE_VILLAGE);
             int j = mobeffect.getAmplifier();
@@ -625,7 +638,6 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                 merchantrecipe1.addToSpecialPriceDiff(-Math.max(k, 1));
             }
         }
-
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 17cc3237c7fc8ceda136b2371fabf6f004a991aa..0cb3f3bdd128632e8618961ef0e242588326a0f3 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -6,6 +6,11 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.item.ItemStack;
 
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe; // CraftBukkit
+// Tentacles Start
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+// Tentacles End
 
 public class MerchantOffer {
 
@@ -20,6 +25,7 @@ public class MerchantOffer {
     public float priceMultiplier;
     public int xp;
     public boolean ignoreDiscounts; // Paper
+    public Map<UUID, Double> playerDiscounts; // Tentacles
     // CraftBukkit start
     private CraftMerchantRecipe bukkitHandle;
 
@@ -39,11 +45,16 @@ public class MerchantOffer {
         this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, 0, ignoreDiscounts, bukkit);
     }
     public MerchantOffer(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int uses, int maxUses, int experience, float priceMultiplier, int demand, boolean ignoreDiscounts, CraftMerchantRecipe bukkit) {
-        this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, demand, ignoreDiscounts);
+        // Tentacles Start - add playerDiscounts param
+        this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, demand, ignoreDiscounts, null, bukkit);
         // Paper end
-        this.bukkitHandle = bukkit;
     }
     // CraftBukkit end
+    public MerchantOffer(ItemStack firstBuyItem, ItemStack secondBuyItem, ItemStack sellItem, int uses, int maxUses, int merchantExperience, float priceMultiplier, int demandBonus, boolean ignoreDiscounts, Map<UUID, Double> playerDiscounts, CraftMerchantRecipe bukkit) {
+        this(firstBuyItem, secondBuyItem, sellItem, uses, maxUses, merchantExperience, priceMultiplier, demandBonus, ignoreDiscounts, playerDiscounts);
+        this.bukkitHandle = bukkit;
+    }
+    // Tentacles end
 
     public MerchantOffer(CompoundTag nbt) {
         this.rewardExp = true;
@@ -73,6 +84,16 @@ public class MerchantOffer {
         this.specialPriceDiff = nbt.getInt("specialPrice");
         this.demand = nbt.getInt("demand");
         this.ignoreDiscounts = nbt.getBoolean("Paper.IgnoreDiscounts"); // Paper
+        // Tentacles start
+        this.playerDiscounts = new HashMap<>();
+        if (nbt.contains("Tentacles.PlayerDiscounts")) {
+            CompoundTag compound = nbt.getCompound("Tentacles.PlayerDiscounts");
+            compound.getAllKeys().forEach(key -> {
+                UUID uuid = UUID.fromString(key);
+                this.playerDiscounts.put(uuid, compound.getDouble(key));
+            });
+        }
+        // Tentacles ends
     }
 
     public MerchantOffer(ItemStack buyItem, ItemStack sellItem, int maxUses, int merchantExperience, float priceMultiplier) {
@@ -95,8 +116,13 @@ public class MerchantOffer {
         this(firstBuyItem, secondBuyItem, sellItem, uses, maxUses, merchantExperience, priceMultiplier, demandBonus, false);
     }
     public MerchantOffer(ItemStack firstBuyItem, ItemStack secondBuyItem, ItemStack sellItem, int uses, int maxUses, int merchantExperience, float priceMultiplier, int demandBonus, boolean ignoreDiscounts) {
-        this.ignoreDiscounts = ignoreDiscounts;
-        // Paper end
+        // Tentacles start
+        this(firstBuyItem, secondBuyItem, sellItem, uses, maxUses, merchantExperience, priceMultiplier, demandBonus, ignoreDiscounts, (Map<UUID, Double>) null);
+    }
+
+    public MerchantOffer(ItemStack firstBuyItem, ItemStack secondBuyItem, ItemStack sellItem, int uses, int maxUses, int merchantExperience, float priceMultiplier, int demandBonus, boolean ignoreDiscounts, Map<UUID, Double> playerDiscounts) {
+        this.ignoreDiscounts = false;
+        // Paper start - add ignoreDiscounts param
         this.rewardExp = true;
         this.xp = 1;
         this.baseCostA = firstBuyItem;
@@ -107,7 +133,9 @@ public class MerchantOffer {
         this.xp = merchantExperience;
         this.priceMultiplier = priceMultiplier;
         this.demand = demandBonus;
+        this.playerDiscounts = playerDiscounts != null ? playerDiscounts : new HashMap<>();
     }
+    // Tentacles end
 
     public ItemStack getBaseCostA() {
         return this.baseCostA;
@@ -218,6 +246,15 @@ public class MerchantOffer {
         nbttagcompound.putInt("specialPrice", this.specialPriceDiff);
         nbttagcompound.putInt("demand", this.demand);
         nbttagcompound.putBoolean("Paper.IgnoreDiscounts", this.ignoreDiscounts); // Paper
+        // Tentacles start
+        if (!this.playerDiscounts.isEmpty()) {
+            CompoundTag compound = new CompoundTag();
+            for (Map.Entry<UUID, Double> entry : this.playerDiscounts.entrySet()) {
+                compound.putDouble(entry.getKey().toString(), entry.getValue());
+            }
+            nbttagcompound.put("Tentacles.PlayerDiscounts", compound);
+        }
+        // Tentacles end
         return nbttagcompound;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
index c48f67f4202e32d9793b462609bd3b95c9765bbd..4d148448c51379f1270f18b52186d1dfab514a80 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
@@ -1,7 +1,9 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Preconditions;
+import java.util.HashMap;
 import java.util.List;
+import java.util.UUID;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.MerchantRecipe;
 
@@ -29,8 +31,11 @@ public class CraftMerchantRecipe extends MerchantRecipe {
         this(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice, false);
     }
     public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts) {
-        super(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice, ignoreDiscounts);
-        // Paper end
+        // Tentacles start
+        this(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice, ignoreDiscounts, null);
+    }
+    public CraftMerchantRecipe(ItemStack result , int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts, HashMap<UUID, Double> playerDiscounts) {
+        super(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice, ignoreDiscounts, playerDiscounts);
         this.handle = new net.minecraft.world.item.trading.MerchantOffer(
                 net.minecraft.world.item.ItemStack.EMPTY,
                 net.minecraft.world.item.ItemStack.EMPTY,
@@ -41,11 +46,13 @@ public class CraftMerchantRecipe extends MerchantRecipe {
                 priceMultiplier,
                 demand,
                 ignoreDiscounts, // Paper - add ignoreDiscounts param
+                playerDiscounts,
                 this
-        );
+            );
         this.setSpecialPrice(specialPrice);
         this.setExperienceReward(experienceReward);
     }
+    // Tentacles end
 
     @Override
     public int getSpecialPrice() {
@@ -129,6 +136,38 @@ public class CraftMerchantRecipe extends MerchantRecipe {
     }
     // Paper end
 
+    // Tentacles start
+    @Override
+    public double getPriceMultiplier(UUID uuid) {
+        return this.handle.playerDiscounts.containsKey(uuid) ? this.handle.playerDiscounts.get(uuid) : handle.priceMultiplier;
+    }
+
+    @Override
+    public double getPriceMultiplier(org.bukkit.entity.Player player) {
+        return getPriceMultiplier(player.getUniqueId());
+    }
+
+    @Override
+    public void setPriceMultiplier(UUID uuid, double priceMultiplier) {
+        this.handle.playerDiscounts.put(uuid, priceMultiplier);
+    }
+
+    @Override
+    public void setPriceMultiplier(org.bukkit.entity.Player player, double priceMultiplier) {
+        setPriceMultiplier(player.getUniqueId(), priceMultiplier);
+    }
+
+    @Override
+    public Double removePriceMultiplier(UUID uuid) {
+        return this.handle.playerDiscounts.remove(uuid);
+    }
+
+    @Override
+    public Double removePriceMultiplier(org.bukkit.entity.Player player) {
+        return removePriceMultiplier(player.getUniqueId());
+    }
+    // Tentacles end
+
     public net.minecraft.world.item.trading.MerchantOffer toMinecraft() {
         List<ItemStack> ingredients = getIngredients();
         Preconditions.checkState(!ingredients.isEmpty(), "No offered ingredients");
