From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: DaRacci <racci@racci.dev>
Date: Sat, 5 Nov 2022 17:26:03 +1100
Subject: [PATCH] Mining Speed API


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 2fb0398fa693a0ce0d298c15426d4b592e69195e..566e09146a76f194f838754613703d5dad574943 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -2669,4 +2669,26 @@ public class ServerPlayer extends Player {
         this.compassBar = compassBar;
     }
     // Purpur end
+
+    // Tentacles start
+    @Override
+    public float getDestroySpeed(BlockState state) {
+        return this.getDestroySpeedPair(state).left();
+    }
+
+    public it.unimi.dsi.fastutil.Pair<Float, Boolean> getDestroySpeedPair(BlockState block) {
+        final var baseSpeed = super.getDestroySpeed(block);
+        final var finalDestroySpeed = new java.util.concurrent.atomic.AtomicReference<>(baseSpeed);
+
+        final var bukkitState = org.bukkit.craftbukkit.block.CraftBlockStates.getBlockState(block, null);
+        final var bukkitPlayer = this.getBukkitEntity();
+
+        dev.racci.tentacles.Tentacles.getGlobalMiningModifiers().values().stream()
+            .map(function -> function.apply(bukkitPlayer, bukkitState))
+            .filter(Objects::nonNull)
+            .forEach(modifier -> finalDestroySpeed.updateAndGet(speed -> speed * modifier));
+
+        return it.unimi.dsi.fastutil.Pair.of(finalDestroySpeed.get(), baseSpeed != finalDestroySpeed.get());
+    }
+    // Tentacles end
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 4816b5bd54ae6e080af4c19df43d57e852e76146..733c0327f303db00238cd0254706e918ac031884 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -64,6 +64,7 @@ public class ServerPlayerGameMode {
     private int lastSentState;
     public boolean captureSentBlockEntities = false; // Paper
     public boolean capturedBlockEntity = false; // Paper
+    public boolean manipulatedMining = false; // Tentacles
 
     public ServerPlayerGameMode(ServerPlayer player) {
         this.gameModeForPlayer = GameType.DEFAULT_MODE;
@@ -135,6 +136,17 @@ public class ServerPlayerGameMode {
 
                 if (f >= 1.0F) {
                     this.hasDelayedDestroy = false;
+                    // Tentacles start - Mining speed API
+                    if (manipulatedMining) {
+                        final var x = delayedDestroyPos.getX() + 0.5;
+                        final var y = delayedDestroyPos.getY() + 0.5;
+                        final var z = delayedDestroyPos.getZ() + 0.5;
+
+                        this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket(new net.minecraft.core.particles.BlockParticleOption(net.minecraft.core.particles.ParticleTypes.BLOCK, iblockdata), false, x, y, z, 0.1F, 0.1F, 0.1F, 4, 100));
+                        this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundSoundPacket(iblockdata.getSoundType().breakSound, net.minecraft.sounds.SoundSource.BLOCKS, x, y, z, 1.0F, 1.0F, this.level.getSeed()));
+                        this.manipulatedMining = false;
+                    }
+                    // Tentacles end
                     this.destroyBlock(this.delayedDestroyPos);
                 }
             }
@@ -152,6 +164,23 @@ public class ServerPlayerGameMode {
                 this.isDestroyingBlock = false;
             } else {
                 this.incrementDestroyProgress(iblockdata, this.destroyPos, this.destroyProgressStart);
+
+                if (this.manipulatedMining && !this.hasDelayedDestroy) {
+                    final int miningTime = this.gameTicks - this.destroyProgressStart;
+                    final var blockData = this.level.getBlockState(this.destroyPos);
+
+                    if (blockData.isAir()) return;
+
+                    final float miningProgress = blockData.getDestroyProgress(this.player, this.player.level, this.destroyPos) * (miningTime + 1);
+
+                    if (miningProgress >= 1.0F) {
+                        this.manipulatedMining = false;
+                        this.isDestroyingBlock = false;
+                        this.hasDelayedDestroy = true;
+                        this.delayedDestroyPos = this.destroyPos;
+                        this.delayedTickStart = this.destroyProgressStart;
+                    }
+                }
             }
         }
 
@@ -159,14 +188,20 @@ public class ServerPlayerGameMode {
 
     private float incrementDestroyProgress(BlockState state, BlockPos pos, int failedStartMiningTime) {
         int j = this.gameTicks - failedStartMiningTime;
-        float f = state.getDestroyProgress(this.player, this.player.level, pos) * (float) (j + 1);
+        // Tentacles start - Mining speed API
+        final var pair = state.getDestroyProgressPair(this.player, this.player.level, pos);
+        float f = pair.left() * (float) (j + 1);
         int k = (int) (f * 10.0F);
 
         if (k != this.lastSentState) {
             this.level.destroyBlockProgress(this.player.getId(), pos, k);
             this.lastSentState = k;
+            if (pair.right()) this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket(this.player.getId() - 1, pos, k));
         }
 
+        if (pair.right()) this.manipulatedMining = true;
+        // Tentacles end
+
         return f;
     }
 
@@ -294,6 +329,7 @@ public class ServerPlayerGameMode {
                         }
 
                         if (!this.hasDelayedDestroy) {
+                            this.manipulatedMining = false;
                             this.isDestroyingBlock = false;
                             this.hasDelayedDestroy = true;
                             this.delayedDestroyPos = pos;
@@ -310,9 +346,17 @@ public class ServerPlayerGameMode {
                     BlockState type = this.level.getBlockStateIfLoaded(this.destroyPos); // Paper - don't load unloaded chunks for stale records here
                     if (type != null) this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
                     if (type != null) this.debugLogging(pos, true, sequence, "aborted mismatched destroying");
+
                     this.destroyPos = BlockPos.ZERO; // Paper
                 }
 
+                // Tentacles start - Mining speed API
+                if (manipulatedMining) {
+                    this.manipulatedMining = false;
+                    this.player.connection.send(new net.minecraft.network.protocol.game.ClientboundBlockDestructionPacket(this.player.getId() - 1, this.destroyPos, -1));
+                }
+                // Tentacles end
+
                 this.level.destroyBlockProgress(this.player.getId(), pos, -1);
                 this.debugLogging(pos, true, sequence, "aborted destroying");
 
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index bcc4c1af0fe153ed87e55706a1a6a5c6e945fec8..f0930b0d8dae2844bfc934d8e82981ce33256c41 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -885,9 +885,37 @@ public abstract class BlockBehaviour {
         }
 
         public float getDestroyProgress(Player player, BlockGetter world, BlockPos pos) {
-            return this.getBlock().getDestroyProgress(this.asState(), player, world, pos);
+            // Tentacles start - Mining speed API
+            return this.getDestroyProgressPair(player, world, pos).left();
         }
 
+        public it.unimi.dsi.fastutil.Pair<Float, Boolean> getDestroyProgressPair(Player player, BlockGetter world, BlockPos pos) {
+            final var state = this.asState();
+            float f = state.getDestroySpeed(world, pos);
+
+            if (f == -1.0F) {
+                return it.unimi.dsi.fastutil.Pair.of(0.0F, false);
+            }
+
+            if (player instanceof net.minecraft.server.level.ServerPlayer serverPlayer) {
+                final var speedPair = serverPlayer.getDestroySpeedPair(state);
+                final float toolModifier = player.hasCorrectToolForDrops(state) ? 30F : 100F;
+
+                var speed = speedPair.left() / f / toolModifier;
+                // For some reason when there is a modifier enabled, and a tool has > 1 speed,
+                // The actual mining speed is too high, this fixes that. (This took like 3 hours to figure out)
+                if (speedPair.right() && toolModifier == 30 && player.getMainHandItem().getDestroySpeed(state) > 1F) {
+                    speed *= 0.3F;
+                }
+
+                return it.unimi.dsi.fastutil.Pair.of(speed, speedPair.right());
+            }
+
+            final float toolModifier = player.hasCorrectToolForDrops(state) ? 30F : 100F;
+            return it.unimi.dsi.fastutil.Pair.of(player.getDestroySpeed(state) / f / toolModifier, false);
+        }
+        // Tentacles end
+
         public int getDirectSignal(BlockGetter world, BlockPos pos, Direction direction) {
             return this.getBlock().getDirectSignal(this.asState(), world, pos, direction);
         }
